package com.rev.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.rev.pojos.Book;
import com.rev.util.ConnectionFactory;

import oracle.jdbc.internal.OracleTypes;

public class BookDAO implements DAO<Book, Integer> {

//	@Override
//	public List<Book> findAll(){
//		List<Book> books = new ArrayList<Book>();
//		try(Connection conn = ConnectionFactory.getInstance().getConnection()){
//			String query = "select * from genre";
//			
//			// STATEMENT INTERFACE
//			Statement statement = conn.createStatement();
//			ResultSet rs = statement.executeQuery(query);
//			while(rs.next()) {
//				//iterate through each row of result set
//				Book temp = new Book();
//				temp.setBookID(rs.getInt(1));		
//				temp.setIsbn(rs.getString(2));	
//				temp.setTitle(rs.getString(3));	
//				temp.setPrice(rs.getInt(4));	
//				temp.setGenreID(rs.getInt(5));	
//				books.add(temp);
//			}
//			
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return books;
//	}
	
	
	// CALLABLE STATEMENT!
	@Override
	public List<Book> findAll(){
		/*
		 * CALLABLE STATEMENT
		 * - extends PreparedStatement
		 * - allows us to execute stored procedures
		 * - must REGISTER our IN and OUT parameter values and types
		 * - IN params will be set using setter methods inherited from PreparedStatement and can return 1 or many ResultSet objects
		 * 
		 * ResultSet
		 * - Table of data representing a DB resultset generated by executing a SQL statement
		 * - Maintains a cursor pointing to the current row(however, it is initially positioned before the first row). The 
		 * 		RS.next() method moves that cursor to each subsequent row until there are no more rows (returns false)
		 */
		
		List<Book> books = new ArrayList<Book>();
		try(Connection conn = ConnectionFactory.getInstance().getConnection()){
			String sql = "{call get_all_books(?)}";
			
			CallableStatement cs = conn.prepareCall(sql);
			cs.registerOutParameter(1, OracleTypes.CURSOR);
			cs.execute();
			
			ResultSet rs = (ResultSet) cs.getObject(1);
			while(rs.next()) {
				Book temp = new Book();
				temp.setBookID(rs.getInt("Book_ID"));
				temp.setGenreID(rs.getInt("Genre_ID"));
				temp.setIsbn(rs.getString("isbn"));
				temp.setPrice(rs.getDouble("price"));
				temp.setTitle(rs.getString("title"));
				books.add(temp);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return books;
	}

	@Override
	public Book findOne(Integer id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Book save(Book obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Book update(Book obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(Book obj) {
		// TODO Auto-generated method stub
		
	}
}
